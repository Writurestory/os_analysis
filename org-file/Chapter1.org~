#+TITLE:    《操作系统分析》实验报告
#+AUTHOR:    温俊瑞(20101152025)
#+EMAIL:     mclyte.rabbit@gmail.com
#+LANGUAGE:  cn
#+OPTIONS:   H:3 num:t toc:nil \n:nil @:t ::t |:t ^:nil -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+INFOJS_OPT: view:content toc:nil ltoc:nil mouse:underline buttons:0 path:http://cs2.swfc.edu.cn/org-info-js/org-info.js
#+STYLE:    <link rel="stylesheet" type="text/css" href="http://cs3.swfu.edu.cn/~101152025/public/org-info/solarized-light.css" />
#+STYLE:    <style>code {font-weight:bold;} body {font-size:10pt;}</style>
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+LINK_UP:   
#+LINK_HOME: 
#+XSLT: 
# (setq org-export-html-use-infojs t)
#+STARTUP:overview
#+TAGS: { 工作(x) 娱乐(y) 杂项(z) }
#+TAGS:{ 编辑器(e) 网络(w) 多媒体(m) 压缩(z) 窗口管理器(c) 系统(s) 终端(t) }
#+TAGS:{ 糟糕(1) 凑合(2) 不错(3) 很好(4) 极品(5) }
#+SEQ_TODO:TODO(T) WAIT(W) | DONE(D!) CANCELED(C@)
#+COLUMNS:%10ITEM %10PRIORITY %15TODO %65TAGS

实验环境
  - OS version:(Linux 3.4.7-1.fc16.i686.PAE) =uname -srv=
  - Kernel source versionv(3.3.7-1) =ls /lib/modules/=
  - GCC version:(gcc (GCC) 4.6.3 20120306 (Red Hat 4.6.3-2)) =gcc --version=

* Approaching to the Linux Kernel
** experimental content
   - [[http://cs2.swfc.edu.cn/~wx672/lecture_notes/os/lab.html#sec-3-1][click here to begin]]
** steps of experiment
*** proc
    - Questions ::
      1. What's the CPU type and model? =/proc/cpuinfo=
	 : less /proc/cpuinfo
	 : model name	: AMD Athlon(tm) II Dual-Core M320
      2. What version of the Linux kernel are you using? =uname -srv=
	 #+begin_example
	 uname -srv
	 Linux 3.4.7-1.fc16.i686.PAE
	 #+end_example
      3. How long has it been since your PC last booted? =uptime=
	 : uptime
	 : 10 min
      4. How much of the total CPU time has been spent executing in user mode? kernel mode? idle? =top=
	 : top
	 : Cpu(s): 33.3%us, 14.4%sy,  0.0%ni, 49.5%id,  0.5%wa,  1.9%hi,  0.5%si,  0.0%st
      5. How much memory is configured in your PC? =top,free,/proc/meminfo=
	 : top
	 : Mem:   2065512k total,  1323912k used,   741600k free,    35252k buffers
	 #+begin_example
	 free
	 total       used       free     shared    buffers     cached
	 Mem:       2065512    1328644     736868          0      35276     491808

	 less /proc/meminfo
	 MemTotal:        2065512 kB
	 MemFree:          694840 kB
	 #+end_example
      6. How much memory is currently available? =top,free,/proc/meminfo=
	 : top
	 : 741600k free
      7. How many disk read/write requests have been made? =/proc/diskstats=
	 : cat /proc/diskstats
	 : 21919
      8. How many context switches has the kernel performed? =/proc/stat=
	 : cat /proc/stat
	 : 1057275779
      9. How many context switches has a process had? =/proc/[pid]/status=
	 : cat /proc/status
	 : voluntary_ctxt_switches:	1432
	 : nonvoluntary_ctxt_switches:	685
      10. How many processes have been created since the system was booted? =/proc/stat=
	  : cat /proc/stat
	  : processes 15865
      11. How many processes are there in the ready queue? =/proc/stat=
	  : cat /proc/stat
	  : procs_running 2
      12. How many processes are blocked waiting for I/O to complete? =/proc/stat=
	  : cat /proc/stat
	  : procs_blocked 0
      13. What does the following command do?
	  #+begin_example
	  cd /proc/`ps | head -2 | tail -1 | cut -f2 -d' '` && ls -l
	  #+end_example
	  : ls -l `the directory of bash PID=4872`
	  : equals to ls -l /proc/4872/
	  
*** Play with the Kernel
    - Tasks ::
      1. Find the following "famous" code, and tell me why they are "famous".
	 - start_kernel();
	 - [[http://cs3.swfc.edu.cn/linux-source/HTML/S/12025.html#L134][find me here]]
	   #+begin_example
	   the system start with start_kernel(),it's just like
	   main function at c and it finished most of the kernel
	   initial things.
	   #+end_example
	 - init();
	 - [[http://cs3.swfc.edu.cn/linux-source/HTML/S/12025.html#L134][find me here]]
	 - [[http://en.wikipedia.org/wiki/Linux_startup_process][more details form wiki]]
	   #+begin_example
	   init (short for initialization) is a program for Unix-based
	   computer operating systems that spawns all other processes.
	   It runs as a daemon and typically has PID 1. The boot loader
	   starts the kernel and the kernel starts init. If one were to
	   delete init without a replacement, the system would encounter
	   a kernel panic on the next reboot.
	   #+end_example
	 - struck task_struck;
	 - [[http://linuxgazette.net/133/saha.html][find me here]]
	   #+begin_example	   
	   it manage the processes of a system	   
	   #+end_example
	   - The following shows the linked list representation of processes in memory ::
	   [[http://linuxgazette.net/133/misc/saha/l-list.png]]
	 - struct inode;
	 - [[http://en.wikipedia.org/wiki/Inode][more details from the wiki]]
	   #+begin_example
	   In computing, an inode (index node) is a data structure found
	   in many Unix file systems. Each inode stores all the information
	   about a file system object (file, directory, device node, socket,
	   pipe, etc.), except data content and file name.[1]
	   #+end_example
	 - struct file;
	 - [[http://cs3.swfc.edu.cn/linux-source/HTML/S/4419.html#L576][find me here]]
	   #+begin_example
	   a file structure delegates a opened file,each opened file in the
	   system are related to a struct file,it's created by kernel when
	   open a file,and send to the function to operate the file,when
	   closed the file,then system released it.
	   #+end_example
	 - fork(); =man 2 fork=
	   #+begin_example
	   fork - create a child process
	   #+end_example
	 - include/asm-generic/unistd.h =man unistd=
	   #+begin_example
	   DESCRIPTION
	   The  <unistd.h>  header  defines  miscellaneous  symbolic constants and
	   types, and declares miscellaneous functions. The actual values  of  the
	   constants  are unspecified except as shown. The contents of this header
	   are shown below.
	   #+end_example
	 - arch/x86_64/entry.S
	 - [[http://www.lingcc.com/2011/12/05/11872/][find it here]]
	   #+begin_example
	   as you can see it's a assembly file with .S,
	   this file defined x86 platform's Terminal vector array.
	   it's archived by the assembler so that the programmer can
	   control the assembly file more flexible.
	   #+end_example
	 - kernel/printk.c
	 - [[http://baike.baidu.com/view/3201386.htm][refer to...]]
	   #+begin_example
	   the printk is just like printf in c Programming,but there
	   is a different between them,printk works in kernel;printf
	   works in user-mode.because the function tty_write(to write result in tty)
	   needs string,which is pointed by fs,only the printf can use fs.
	   printk should make fs point to the ds(data segment register).
	   in a word,the fs makes them different.
	   #+end_example
      2. Finish lesson 2-6 of LinuxChix Kernel Hacking Lessons (cs2 mirror). And you are encouraged to go through lesson 7-9 as well, though it's not mandatory.

*** Hello, Kernel Module!
**** Questions
*** System calls
** gains


* Process management
** experimental content
   - [[http://cs2.swfc.edu.cn/~wx672/lecture_notes/os/lab.html#sec-4][click to continue]]
** steps of experiment
*** Process creation
**** Your tasks
*** Thread
*** IPC
**** Signals
**** Pipe
**** FIFO
**** File Locking
**** Message Queues
**** Semaphores
** gains


* Memory management
** experimental content
   - [[http://cs2.swfc.edu.cn/~wx672/lecture_notes/os/lab.html#sec-5][come on! go ahead.]]
** steps of experiment
*** Basic commands
*** Shared Memory Segments
*** Memory Mapped Files
** gains


* File system
** experimental content
   - [[http://cs2.swfc.edu.cn/~wx672/lecture_notes/os/lab.html#sec-5][last one]]
** steps of experiment
*** File system creation
**** Your tasks
*** Finding a file with =hexdump=
** gains
